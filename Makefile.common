MODSRCDIR = .

CXXFLAGS += -Wall -Werror -Wno-unused-value -Wno-unused-but-set-variable -Wno-unused-variable -std=c++17
CXXFLAGS += -I$(SRCBASE)/include -I.
#CXXFLAGS += -Wl,--wrap,socket -Wl,--wrap,bind -Wl,--wrap,listen -Wl,--wrap,connect
#CXXFLAGS += -Wl,--wrap,accept -Wl,--wrap,read -Wl,--wrap,write -Wl,--wrap,close -Wl,--wrap,getaddrinfo
LDFLAGS += -Wl,--wrap,socket -Wl,--wrap,bind -Wl,--wrap,listen -Wl,--wrap,connect
LDFLAGS += -Wl,--wrap,accept -Wl,--wrap,read -Wl,--wrap,write -Wl,--wrap,close -Wl,--wrap,getaddrinfo

ifeq ($(DEBUG), TRUE)
	CXXFLAGS += -ggdb3 -O0
	BUILDDIR = $(SRCBASE)/build/debug
else
	CXXFLAGS += -O2
	BUILDDIR = $(SRCBASE)/build/release
endif

OBJDIR = $(BUILDDIR)/obj/$(MODULE)
LIBDIR = $(BUILDDIR)/lib
BINDIR = $(BUILDDIR)/bin
DEPDIR = $(BUILDDIR)/dep/$(MODULE)

VPATH += $(MODSRCDIR)
CPPFILES = $(wildcard *.cpp)
OBJS = $(patsubst %.cpp, $(OBJDIR)/%.o, $(notdir $(CPPFILES)))
DEPS = $(patsubst %.cpp, $(DEPDIR)/%.dep, $(notdir $(CPPFILES)))

all: $(OBJDIR) $(BINS) $(LIBS)

$(OBJDIR):
	mkdir -p $@

$(DEPDIR):
	mkdir -p $@

$(LIBS): $(OBJS)
	$(AR) rcs $@ $^

$(BINS): $(BINDIR)/%: $(OBJDIR)/%.o
	$(CXX) -o $@ $^ $(LDFLAGS)

$(OBJS): $(OBJDIR)/%.o: $(MODSRCDIR)/%.cpp
	$(CXX) -c $(CXXFLAGS) $< -o $@

$(DEPS): $(DEPDIR)/%.dep: $(MODSRCDIR)/%.cpp $(DEPDIR)
	@set -e ; \
  echo "$(patsubst $(DEPDIR)/%.dep, $(OBJDIR)/%.o, $@)";\
  echo $<;\
	$(CXX) -MT"$(patsubst $(DEPDIR)/%.dep, $(OBJDIR)/%.o, $@)" -MM $< $(CXXFLAGS) > $@

-include $(DEPS)

clean:
	$(RM) -f $(OBJS) $(BINS) $(LIBS)

clang-format:
	for f in $(CPPFILES) ; do \
		clang-format -style=file -i $$f ; \
	done \

.PHONY: all clean clang-format
